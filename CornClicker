/*
 * Jimmy Blaszkiewicz
 * Metro Kreme
 * A Clicking Game unlike Cookie Clicker in every way... 
 * I mean it has Corn...
 */

package cornclicker;

import java.awt.BasicStroke;
import javax.swing.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.Color; 
import java.awt.Dimension; 
import java.awt.FlowLayout; 
import java.awt.GradientPaint; 
import java.awt.Graphics; 
import java.awt.Graphics2D; 
import java.awt.GridLayout;
import java.awt.RenderingHints; 
import java.awt.geom.RoundRectangle2D; 
import java.util.Scanner;
import javax.swing.JButton; 
import javax.swing.JFrame; 
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;


class JRButton1 extends JButton {
     
    private int w ;
    private int h ;
    private RoundRectangle2D re;
    private final BasicStroke st = new BasicStroke(2f);
    private final double wRatio = 200/15;
    private final double hRatio = 25/12;
 
    private double arcw;
    private double arch;
     
    public JRButton1(String name, int w, int h){
         
        super(name);
        setContentAreaFilled(false);
        setPreferredSize(new Dimension(w,h));       
        setFocusable(false);
        
    }
 
    
    public void paintComponent(Graphics g){
        this.w = getWidth();
        this.h = getHeight();
        this.arcw = getWidth()/wRatio;
        this.arch = getHeight()/hRatio;
        re = new RoundRectangle2D.Double(st.getLineWidth()/2,st.getLineWidth()/2,w-(st.getLineWidth()/0.5), h-(st.getLineWidth()/0.5), arcw, arch);
 
        GradientPaint push = new GradientPaint((w/2),(h/2),Color.YELLOW,(w/2),h,Color.WHITE,false);
        GradientPaint up = new GradientPaint((w/2),(h/2),Color.WHITE,(w/2),h,Color.YELLOW,false);
         
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
     
        if (getModel().isArmed()) {
            g2.setPaint(push);
            g2.fill(re);
        }
        else{
            g2.setPaint(up);
            g2.fill(re);
        }
         
        super.paintComponent(g2);
             
    }       
    public void paintBorder(Graphics g){
         
        Graphics2D g2 = (Graphics2D) g;
        g2.setColor(Color.LIGHT_GRAY);
        g2.setStroke(st);
        g2.draw(re);
        g2.dispose();
    }

}
public class CornClicker extends JFrame {
    private final JRButton1 grow;
    private final JRButton1 eat;
    private final JRButton1 sell;
    private final JRButton1 upgrades;
    private final JRButton1 store;
    private final JRButton1 cornAmount;
    private final JRButton1 moneyAmount;
    private final JRButton1 cheats;
    private final JPanel buttonPanel;
    private final JPanel labelPanel;
    private final JLabel cornLabel;
    private final JLabel moneyLabel;
    private final JLabel sellPerClickLabel;
    private final JLabel growPerClickLabel;
    private final JLabel moneyPerCornLabel;
    private final JLabel sellPerSecondLabel;
    private final JLabel growPerSecondLabel;
    private final int w = 300;
    private final int h = 35;

    
    public CornClicker()
    {
        super( "Walk of Corn" );
        setLayout(new GridLayout(2,1));
        
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(4,2));
        
        grow = new JRButton1("Grow Corn",w,h);
        buttonPanel.add (grow);
        
        eat = new JRButton1 ("Eat the corn",w,h);
        buttonPanel.add (eat);
        
        sell = new JRButton1 ("Sell your product",w,h);
        buttonPanel.add (sell);
        
        upgrades = new JRButton1 ("Upgrades",w,h);
        buttonPanel.add (upgrades);
        
        store = new JRButton1 ("Store",w,h);
        buttonPanel.add (store);
        
        cornAmount = new JRButton1 ("How much Corn do I have?",w,h);
        buttonPanel.add (cornAmount);
        
        moneyAmount = new JRButton1 ("How much Money do I have?",w,h);
        buttonPanel.add (moneyAmount);
        
        cheats = new JRButton1 ("Enter a Cheat Code.",w,h);
        buttonPanel.add (cheats);
        
        
        labelPanel = new JPanel();
        labelPanel.setLayout(new GridLayout(4,2));
        
        cornLabel = new JLabel("Corn: " + corn);
        labelPanel.add(cornLabel);
        
        moneyLabel = new JLabel("Money: $" + money);
        labelPanel.add(moneyLabel);
        
        sellPerClickLabel = new JLabel("Sell Per Click: " + sellAmount);
        labelPanel.add(sellPerClickLabel);
        
        growPerClickLabel = new JLabel("Grow Per Click: " + growAmount);
        labelPanel.add(growPerClickLabel);
        
        moneyPerCornLabel = new JLabel("Sell Price: $" + sellPrice);
        labelPanel.add(moneyPerCornLabel);
        
        sellPerSecondLabel = new JLabel("Sell Per Second: " + sps);
        labelPanel.add(sellPerSecondLabel);
        
        growPerSecondLabel = new JLabel("Grow Per Second: " + cps);
        labelPanel.add(growPerSecondLabel);
        
        add(buttonPanel);
        add(labelPanel);
        
        CornHandler handler1 = new CornHandler();
        grow.addActionListener(handler1);
        
        EatHandler handler2 = new EatHandler();
        eat.addActionListener(handler2);
        
        SellHandler handler3 = new SellHandler();
        sell.addActionListener(handler3);

        UpgradeHandler handler4 = new UpgradeHandler();
        upgrades.addActionListener(handler4);
        
        StoreHandler handler5 = new StoreHandler();
        store.addActionListener(handler5);
        
        CornAmountHandler handler6 = new CornAmountHandler();
        cornAmount.addActionListener(handler6);
        
        MoneyAmountHandler handler7 = new MoneyAmountHandler();
        moneyAmount.addActionListener(handler7);
        
        CheatHandler handler8 = new CheatHandler();
        cheats.addActionListener(handler8);
        
        new Timer1();
        
    }//end of cornClicker constructor
    int corn = 0;
    int money = 0;
    int sellPrice = 1;
    int sellAmount = 1;
    int growAmount = 1;
    int cps = 0;
    int cornQuality = 0;
    int sps = 0;
    //Timer to control SellPerSecond and CornPerSecond
    public class Timer1 extends JFrame{
        private final Timer timer;
        
        public Timer1(){
            timer = new Timer(1, new TimerListener());
            timer.start();
        }
        private class TimerListener implements ActionListener
        {   
           int counter = 0;
           public void actionPerformed(ActionEvent event)
            {
                
                if(counter == 100)
                {
                    corn = corn + cps;
                    if(corn - sps >= 0)
                    {
                        money = money + (sps * sellPrice);
                        corn = corn - sps;
                    }//end if
                    counter = 0;
                }//end if
                counter++;
                
                cornLabel.setText("Corn: " + corn);
                moneyLabel.setText("Money: $" + money);
                sellPerClickLabel.setText("Sell Per Click: " + sellAmount);
                growPerClickLabel.setText("Grow Per Click: " + growAmount);
                moneyPerCornLabel.setText("Sell Price: $" + sellPrice);
                sellPerSecondLabel.setText("Sell Per Second: " + sps);
                growPerSecondLabel.setText("Grow Per Second: " + cps);
                
            }
        }
    }//end of class Timer

    private class CornHandler implements ActionListener
    {   
        public void actionPerformed(ActionEvent event)
        {
            corn = corn + growAmount;
            System.out.printf("You have %d corns.\n", corn);
        }//end actionPerfomed method
        
    }//end CornHandler Class
    private class EatHandler implements ActionListener
    {  
        public void actionPerformed(ActionEvent event)
        {
            if (corn > 0){
//                subCocaine();
                corn--;
                Random randomGenerator = new Random();
                int randomInt = randomGenerator.nextInt(100);
                if (randomInt >= 90){
                    System.out.println("You get so full that you lose the rest of your corn.");
                    corn = 0;
                }
                else if (randomInt >= 50){
                    try {
                        System.out.println("You pass out.");
                        Thread.sleep(3000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(CornClicker.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                System.out.printf("You have %d corn.\n", corn);
            }
            if (corn == 0)
                System.out.println("You are out of corn.");
        }//end actionPerfomed method  
    }//end EatHandler Class
    private class SellHandler implements ActionListener
    {
        public void actionPerformed(ActionEvent event)
        {
            if (corn >0){
                corn --;
                money = money + (sellAmount*sellPrice);
                System.out.printf("You sell %d corns for $%d a pop.\n",sellAmount,sellPrice);
                System.out.printf("You have $%d.\n", money);
            }
            if (corn == 0)
                System.out.println("You are out of corn.");
        }//end actionPerformed method
    }//end SellHandler class
    private class CornAmountHandler implements ActionListener
    {
        public void actionPerformed(ActionEvent event)
        {
            System.out.printf("You have %d corn.\n", corn);
        }
    }
    private class MoneyAmountHandler implements ActionListener
    {
        public void actionPerformed(ActionEvent event)
        {
            System.out.printf("You have $%d.\n", money);
        }
    }
    private class CheatHandler implements ActionListener
    {
        private Scanner input = new Scanner(System.in);
        public void actionPerformed(ActionEvent event)
        {
            String cheat =
                    JOptionPane.showInputDialog("Enter a cheat code: ");
            
            if(cheat.equals("GIMMESTUFF"))
            {
                money = money + 25000;
                corn = corn + 25000;
            }
            else
            {
                System.out.println("You are bad at cheating.");
                money = 0;
                corn = 0;
            }
        }
    }
    private static JRButton1 poppingCorn;
    public class UpgradeFrame extends JFrame
    {
        private final JRButton1 marry;
        private final JRButton1 move;
        
        public UpgradeFrame()
        {
            super("Upgrades");
            setLayout(new FlowLayout());
            
            marry = new JRButton1("Marry a corn enthusiast: $250",w,h);
            add (marry);
            
            move = new JRButton1("Move to Nebraska: $250",w,h);
            add (move);
            
            poppingCorn = new JRButton1("Make a new strain of corn: $50",w,h);
            add(poppingCorn);
            
            MarryHandler handler1 = new MarryHandler();
            marry.addActionListener(handler1);
            
            MoveHandler handler2 = new MoveHandler();
            move.addActionListener(handler2);
            
            PoppingHandler handler3 = new PoppingHandler();
            poppingCorn.addActionListener(handler3);
                    
        }//end of method UpgradeFrame
        
    }//end of class UpgradeFrame
    private class MoveHandler implements ActionListener
    {
        private boolean moved = false;
        public void actionPerformed (ActionEvent event)
        {
            if (money >= 250 && !moved){
                growAmount = growAmount + 10;
                System.out.printf("You can now grow %d corns at a time.\n",growAmount);
                moved = true;
                money = money - 250;
            }
            else if (money < 250){
                System.out.println("You cannot afford that right now.");
            }
            else if (moved)
                System.out.println("You already live in Nebraska.");
        }//end of actionPerformed method
    }//end of MoveHandler class
    private class MarryHandler implements ActionListener
    {
        private boolean married = false;
        public void actionPerformed(ActionEvent event)
        {
            if (money >=  250 && !married)
            {
                sellAmount = sellAmount + 10;
                System.out.printf("You can now sell %d corns at a time.\n", sellAmount);
                married = true;
                money = money - 250;
            }
                    else if (money < 250){
                System.out.println("You cannot afford to pay off her family, "
                        + "so they take all of your money and your corn.");
                money = 0;
                corn = 0;
                System.out.printf("You have %d corn.\n",corn);
                System.out.printf("You have $%d.\n",money);
            }
                    else  if (married){
                System.out.println("Your wife finds out that you tried to marry"
                        + " another woman and beats you with your own money and then leaves you");
                money = 0;
                married = false;
                sellAmount = sellAmount - 10;
            }
        }
    }
    private int poppedValue = 50;
    private int poppedChange = 5;
    private class PoppingHandler implements ActionListener
    {
        public void actionPerformed(ActionEvent event)
        {
            if(money>=poppedValue)
            {
                sellPrice = sellPrice + poppedChange;
                money = money - poppedValue;
                System.out.println("You have created a new strain of corn!\nIt now sells for an additional $5!");
                
                poppedValue *= 2;
                poppedChange *= 1.5;
                poppingCorn.setText("Make a new strain of corn: $" + poppedValue);
            }
            else if(money<poppedValue)
            {
                System.out.println("You cannot afford that right now.");
            }
        }
    }
    private class UpgradeHandler implements ActionListener
    {
        public void actionPerformed(ActionEvent event)
        {
            UpgradeFrame upgradeFrame = new UpgradeFrame();
            upgradeFrame.setSize(440,150);
            upgradeFrame.setVisible(true);
            upgradeFrame.setResizable(false);
        }
    }
    public class StoreFrame extends JFrame
    {
        private final JRButton1 cornDealer;
        private final JRButton1 cornFarmer;
        public StoreFrame()
        {
            super("Store");
            setLayout(new FlowLayout());
            
            cornDealer = new JRButton1("Hire a Corn Salesman: $25",w,h);
            add (cornDealer);
            
            cornFarmer = new JRButton1("Hire a Corn Farmer: $25",w,h);
            add(cornFarmer);
            
            DealerHandler handler1 = new DealerHandler();
            cornDealer.addActionListener(handler1);
            
            FarmerHandler handler2 = new FarmerHandler();
            cornFarmer.addActionListener(handler2);
            
        }
    }
    private class DealerHandler implements ActionListener
    {
        
        public void actionPerformed(ActionEvent event)
        {
            if(money >= 25)
            {
                sps = sps + 1;
                System.out.println("You have purchased a Corn Salesman for $25.");
                System.out.printf("You are now selling %d corns per second\n", sps);
                money = money - 25;
            }
            else
                System.out.println("You cannot afford this right now.");
        }
    }
    private class FarmerHandler implements ActionListener
    {
        public void actionPerformed(ActionEvent event)
        {
            if(money >= 25)
            {
                cps = cps + 1;
                System.out.println("You have purchased a Corn Farmer for $25.");
                System.out.printf("You are now growing %d corns per second\n", cps);
                money = money - 25;
            }
            else{
                System.out.println("You cannot afford that right now.");
            }
        }
    }
    private class StoreHandler implements ActionListener
    {
        public void actionPerformed(ActionEvent event)
        {
            StoreFrame storeFrame = new StoreFrame();
            storeFrame.setSize(440,150);
            storeFrame.setResizable(false);
            storeFrame.setVisible(true);
        }
    }
}//end CornClicker
