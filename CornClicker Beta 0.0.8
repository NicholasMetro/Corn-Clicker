/*
 * Jimmy Blaszkiewicz
 * Metro Kreme
 * A Clicking Game unlike Cookie Clicker in every way... 
 * I mean it has Corn...
 */

package cornclicker;


import javax.swing.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.FlowLayout; 
import java.awt.GridLayout;
import java.text.DecimalFormat;
import java.util.Scanner;
import javax.swing.JFrame; 
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class CornClicker extends JFrame {
    private final JimButton grow;
    private final JimButton eat;
    private final JimButton sell;
    private final JimButton upgrades;
    private final JimButton store;
    private final JimButton cheats;
    
    private static JimButton poppingCorn;
    
    private final JPanel buttonPanel;
    private final JPanel labelPanel;
    
    private final JLabel cornLabel;
    private final JLabel moneyLabel;
    private final JLabel sellPerClickLabel;
    private final JLabel growPerClickLabel;
    private final JLabel moneyPerCornLabel;
    private final JLabel sellPerSecondLabel;
    private final JLabel growPerSecondLabel;
    private final JLabel outputLabel;
    
    private final int w = 300;
    private final int h = 35;
    
    private int poppedValue = 50;
    private int poppedChange = 5;
    
    private DecimalFormat form = new DecimalFormat("#0.00");
    
    public CornClicker()
    {
        super( "CornClicker" );
        setLayout(new GridLayout(2,1));
        
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(3,2));
        
        grow = new JimButton("Grow Corn",w,h);
        buttonPanel.add (grow);
        
        eat = new JimButton ("Eat the corn",w,h);
        buttonPanel.add (eat);
        
        sell = new JimButton ("Sell your product",w,h);
        buttonPanel.add (sell);
        
        upgrades = new JimButton ("Upgrades",w,h);
        buttonPanel.add (upgrades);
        
        store = new JimButton ("Store",w,h);
        buttonPanel.add (store);
        
        cheats = new JimButton ("Enter a Cheat Code.",w,h);
        buttonPanel.add (cheats);
        
        
        labelPanel = new JPanel();
        labelPanel.setLayout(new GridLayout(4,2));
        
        cornLabel = new JLabel("Corn: " + corn);
        labelPanel.add(cornLabel);
        
        moneyLabel = new JLabel("Money: $" + money);
        labelPanel.add(moneyLabel);
        
        sellPerClickLabel = new JLabel("Sell Per Click: " + sellAmount);
        labelPanel.add(sellPerClickLabel);
        
        growPerClickLabel = new JLabel("Grow Per Click: " + growAmount);
        labelPanel.add(growPerClickLabel);
        
        moneyPerCornLabel = new JLabel("Sell Price: $" + sellPrice);
        labelPanel.add(moneyPerCornLabel);
        
        sellPerSecondLabel = new JLabel("Sell Per Second: " + sps);
        labelPanel.add(sellPerSecondLabel);
        
        growPerSecondLabel = new JLabel("Grow Per Second: " + cps);
        labelPanel.add(growPerSecondLabel);
        
        outputLabel = new JLabel("Welcome to CornClicker!");
        labelPanel.add(outputLabel);
        
        add(buttonPanel);
        add(labelPanel);
        
        CornHandler handler1 = new CornHandler();
        grow.addActionListener(handler1);
        
        EatHandler handler2 = new EatHandler();
        eat.addActionListener(handler2);
        
        SellHandler handler3 = new SellHandler();
        sell.addActionListener(handler3);

        UpgradeHandler handler4 = new UpgradeHandler();
        upgrades.addActionListener(handler4);
        
        StoreHandler handler5 = new StoreHandler();
        store.addActionListener(handler5);
        
        CheatHandler handler6 = new CheatHandler();
        cheats.addActionListener(handler6);
        
        new Timer1();
        
    }//end of cornClicker constructor
    String formattedCorn;
    String formattedMoney;
    double corn = 0;
    double money = 0;
    int sellPrice = 1;
    int sellAmount = 1;
    int growAmount = 1;
    double cps = 0;
    int cornQuality = 0;
    double sps = 0;
    int time = 90;
    //Timer to control SellPerSecond and CornPerSecond
    public class Timer1 extends JFrame{
        private final Timer timer;
        
        public Timer1(){
            timer = new Timer(1, new TimerListener());
            timer.start();
        }//end Timer1 Constructor
        
        private class TimerListener implements ActionListener
        {  
           public void actionPerformed(ActionEvent event)
            {
               
                corn = corn + cps / time;
                if(corn - sps >= 0)
                {
                    money = money + (sps * sellPrice)/time;
                    corn = corn - sps / time;
                }//end if
                
                
                cornLabel.setText("Corn: " + form.format(corn));
                moneyLabel.setText("Money: $" + form.format(money));
                sellPerClickLabel.setText("Sell Per Click: " + sellAmount);
                growPerClickLabel.setText("Grow Per Click: " + growAmount);
                moneyPerCornLabel.setText("Sell Price: $" + sellPrice);
                sellPerSecondLabel.setText("Sell Per Second: " + sps);
                growPerSecondLabel.setText("Grow Per Second: " + cps);
                
            }//end actionPerformed method
        }//end TimerListener class
    }//end of class Timer

    private class CornHandler implements ActionListener
    {   
        public void actionPerformed(ActionEvent event)
        {
            corn = corn + growAmount;
            MetroSound sound = new MetroSound("click.wav");
        }//end actionPerfomed method
        
    }//end CornHandler Class
    private class EatHandler implements ActionListener
    {  
        Random randomGenerator = new Random();
        public void actionPerformed(ActionEvent event)
        {
            if (corn > 0){
                MetroSound sound = new MetroSound("chomp.wav");
                corn--;
                
                int randomInt = randomGenerator.nextInt(100);
                if (randomInt >= 90){
                    outputLabel.setText("You lose the rest of your corn.");
                    corn = 0;
                }//end if
                else if (randomInt >= 80){
                    try 
                    {
                        outputLabel.setText("You pass out.");
                        Thread.sleep(3000);
                    }//end try 
                    catch (InterruptedException ex) 
                    {
                        Logger.getLogger(CornClicker.class.getName()).log(Level.SEVERE, null, ex);
                    }//end catch
                }//end else if
                
            }//end if
            if (corn == 0)
                outputLabel.setText("You are out of corn.");
        }//end actionPerfomed method  
    }//end EatHandler Class
    private class SellHandler implements ActionListener
    {
        public void actionPerformed(ActionEvent event)
        {
            if (corn >0){
                MetroSound sound = new MetroSound("click.wav");
                corn = corn - sellAmount;
                money = money + (sellAmount * sellPrice);
                outputLabel.setText("You sell "+ sellAmount +" corns for $" + sellPrice + " a pop.");
                
            }//end if
            if (corn == 0)
                outputLabel.setText("You are out of corn.");
        }//end actionPerformed method
    }//end SellHandler class
    
    private class CheatHandler implements ActionListener
    {
        private Scanner input = new Scanner(System.in);
        public void actionPerformed(ActionEvent event)
        {
            String cheat =
                    JOptionPane.showInputDialog("Enter a cheat code: ");
            
            if(cheat.equals("GIMMESTUFF"))
            {
                money = money + 25000;
                corn = corn + 25000;
            }//end if
            else
            {
                outputLabel.setText("You are bad at cheating.");
                money = 0;
                corn = 0;
            }//end else
        }//end actionPerformed
    }//end CheatHandler class
    
    public class UpgradeFrame extends JFrame
    {
        private final JimButton marry;
        private final JimButton move;
        
        public UpgradeFrame()
        {
            super("Upgrades");
            setLayout(new FlowLayout());
            
            marry = new JimButton("Marry a corn enthusiast: $250",w,h);
            add (marry);
            
            move = new JimButton("Move to Nebraska: $250",w,h);
            add (move);
            
            poppingCorn = new JimButton("Make a new strain of corn: $50",w,h);
            add(poppingCorn);
            
            MarryHandler handler1 = new MarryHandler();
            marry.addActionListener(handler1);
            
            MoveHandler handler2 = new MoveHandler();
            move.addActionListener(handler2);
            
            PoppingHandler handler3 = new PoppingHandler();
            poppingCorn.addActionListener(handler3);
                    
        }//end of method UpgradeFrame
        
    }//end of class UpgradeFrame
    private class MoveHandler implements ActionListener
    {
        private boolean moved = false;
        public void actionPerformed (ActionEvent event)
        {
            if (money >= 250 && !moved){
                MetroSound sound = new MetroSound("moo.wav");
                growAmount = growAmount + 10;
                outputLabel.setText("You can now grow " + growAmount + " corns at a time.");
                moved = true;
                money = money - 250;
            }//end if
            else if (money < 250){
                outputLabel.setText("You cannot afford that right now.");
            }//end else if
            else if (moved)
                outputLabel.setText("You already live in Nebraska.");
        }//end of actionPerformed method
    }//end of MoveHandler class
    private class MarryHandler implements ActionListener
    {
        private boolean married = false;
        public void actionPerformed(ActionEvent event)
        {
            if (money >=  250 && !married)
            {
                MetroSound sound = new MetroSound("wedding bells.wav");
                sellAmount = sellAmount + 10;
                married = true;
                money = money - 250;
            }//end if
            else if (money < 250){
                outputLabel.setText("Unable to pay off family.");
                money = 0;
                corn = 0;
            }//end else if
            else  if (married){
                outputLabel.setText("Cheating is bad");
                money = 0;
                married = false;
                sellAmount = sellAmount - 10;
            }//end else if
        }//end actionPerformed
    }//end marryHandler class
    
    private class PoppingHandler implements ActionListener
    {
        public void actionPerformed(ActionEvent event)
        {
            if(money>=poppedValue)
            {
                MetroSound sound = new MetroSound("pop.wav");
                sellPrice = sellPrice + poppedChange;
                money = money - poppedValue;
                outputLabel.setText("You have created a new strain of corn");
                
                poppedValue *= 2;
                poppedChange *= 1.5;
                poppingCorn.setText("Make a new strain of corn: $" + poppedValue);
            }//end if
            else if(money<poppedValue)
            {
                outputLabel.setText("You cannot afford that right now.");
            }//end else if
        }//end actionPerformed
    }//end PoppingHandler class
    private class UpgradeHandler implements ActionListener
    {
        public void actionPerformed(ActionEvent event)
        {
            UpgradeFrame upgradeFrame = new UpgradeFrame();
            upgradeFrame.setSize(440,160);
            upgradeFrame.setLocationRelativeTo(null);
            upgradeFrame.setVisible(true);
            upgradeFrame.setResizable(false);
        }//end actionPerformed
    }//end UpgradeHandler class
    public class StoreFrame extends JFrame
    {
        private final JimButton cornDealer;
        private final JimButton cornFarmer;
        public StoreFrame()
        {
            super("Store");
            setLayout(new FlowLayout());
            
            cornDealer = new JimButton("Hire a Corn Salesman: $25",w,h);
            add (cornDealer);
            
            cornFarmer = new JimButton("Hire a Corn Farmer: $25",w,h);
            add(cornFarmer);
            
            DealerHandler handler1 = new DealerHandler();
            cornDealer.addActionListener(handler1);
            
            FarmerHandler handler2 = new FarmerHandler();
            cornFarmer.addActionListener(handler2);
            
        }//end storeframe constructor
    }//end class storeframe
    private class DealerHandler implements ActionListener
    {
        
        public void actionPerformed(ActionEvent event)
        {
            
            if(money >= 25)
            {
                MetroSound sound = new MetroSound("cha-ching.wav");
                sps = sps + 1;
                outputLabel.setText("You have purchased a Salesman");
                money = money - 25;
                
            }//end if
            else
                outputLabel.setText("You cannot afford this right now.");
        }//end actionPerformed
    }//end dealerHandler
    private class FarmerHandler implements ActionListener
    {
        public void actionPerformed(ActionEvent event)
        {
            if(money >= 25)
            {
                MetroSound sound = new MetroSound("cha-ching.wav");
                cps = cps + 1;
                outputLabel.setText("You have purchased a Farmer");
                money = money - 25;
            }//end if
            else{
                outputLabel.setText("You cannot afford that right now.");
            }//end else
        }//actionperformed
    }//end farmerhandler
    private class StoreHandler implements ActionListener
    {
        public void actionPerformed(ActionEvent event)
        {
            StoreFrame storeFrame = new StoreFrame();
            storeFrame.setSize(440,150);
            storeFrame.setLocationRelativeTo(null);
            storeFrame.setResizable(false);
            storeFrame.setVisible(true);
        }//end actionPerformed
    }//end storeHandler
}//end CornClicker class
